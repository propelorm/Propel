<?php

/**
 * This file is part of the Propel package.
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @license    MIT License
 */

require_once dirname(__FILE__) . '/OMBuilder.php';

/**
 * Generates a PHP5 base Query class for user object model (OM).
 *
 * This class produces the base query class (e.g. BaseBookQuery) which contains all
 * the custom-built query methods.
 *
 * @author     Bert-Jan de Lange
 * @package    propel.generator.builder.om
 */
class TypehintBuilder extends OMBuilder
{
    /**
     * Gets the package for the [base] object classes.
     *
     * @return string
     */
    public function getPackage()
    {
        return parent::getPackage() . '.hint';
    }

    public function getNamespace()
    {
        if ($namespace = parent::getNamespace()) {
            if ($this->getGeneratorConfig() && $omns = $this->getGeneratorConfig()->getBuildProperty('namespaceHint')) {
                return $namespace . '\\' . $omns;
            } else {
                return $namespace;
            }
        }
    }

    /**
     * Returns the name of the current class being built.
     *
     * @return string
     */
    public function getUnprefixedClassname()
    {
        return $this->getTable()->getPhpName() .'Hint';
    }

    /**
     * Adds the include() statements for files that this class depends on or utilizes.
     *
     * @param string &$script The script will be modified in this method.
     */
    protected function addIncludes(&$script)
    {
    }

    /**
     * Adds class phpdoc comment and opening of class.
     *
     * @param string &$script The script will be modified in this method.
     */
    protected function addClassOpen(&$script)
    {
        $table = $this->getTable();

        foreach ($table->getForeignKeys() as $fk) {
            $fkTable = $this->getForeignTable($fk);
            $typehintingQueryClassname = $this->getTypehintingClassname($table, $fkTable);

            if (false !== strpos($script, 'abstract class '. $typehintingQueryClassname)) {
                continue;
            }


            $this->addFkTypehintingClass($script, $fk);
        }

        foreach ($table->getReferrers() as $refFk) {
            $table = $refFk->getTable();
            $fkTable = $this->getForeignTable($refFk);
            $refTypehintingQueryClassname = $this->getRefTypehintingClassname($table, $fkTable);

            if (false !== strpos($script, 'abstract class '. $refTypehintingQueryClassname)) {
                continue;
            }

            $this->addRefFkTypehintingClass($script, $refFk);
        }
    }

    /**
     * Specifies the methods that are added as part of the stub object class.
     *
     * By default there are no methods for the empty stub classes; override this method
     * if you want to change that behavior.
     *
     * @param string &$script The script will be modified in this method.
     *
     * @see        ObjectBuilder::addClassBody()
     */
    protected function addClassBody(&$script)
    {

    }

    /**
     * Closes class.
     *
     * @param string &$script The script will be modified in this method.
     */
    protected function addClassClose(&$script)
    {
    }

    /**
     * Generates classes for the relations from this table to it's foreign tables.
     *
     * @param string $script
     * @param ForeignKey $fk
     */
    protected function addFkTypehintingClass(&$script, ForeignKey $fk)
    {
        $table = $this->getTable();
        $queryBuilder = $this->getNewStubQueryBuilder($table);

        $fkTable = $this->getForeignTable($fk);
        $fkQueryBuilder = $this->getNewStubQueryBuilder($fkTable);
        $typehintingQueryClassname = $this->getTypehintingClassname($table, $fkTable);

        // namespaces
        $this->declareClassFromBuilder($queryBuilder);
        $this->declareClassFromBuilder($fkQueryBuilder);

        if ($this->getBuildProperty('addClassLevelComment')) {
            $script .= "
/**
 * Hint class that providers typehinting for ". $fkQueryBuilder->getClassname() ."::endUse().
 *";
            if ($this->getBuildProperty('addTimeStamp')) {
                $now = strftime('%c');
                $script .= "
 * This class was autogenerated by Propel " . $this->getBuildProperty('version') . " on:
 *
 * $now
 *";
            }

            $script .= "
 *
 * @package    propel.generator." . $this->getPackage() ."
 *";
        } else {
            $script .= "
/**";
        }

        $script .= "
 *
 * Empty class for IDE typehinting only.
 *
 * This class represents the relation between the tables ". $table->getPhpName() ." and ". $fkTable->getPhpName() .".
 *
 * @method ". $queryBuilder->getClassname() ." endUse()
 */
abstract class $typehintingQueryClassname extends ". $fkQueryBuilder->getClassname() ." {}
";
    }

    /**
     * Generates classes for the relations from this table's foreign tables to itself.
     *
     * @param string $script
     * @param ForeignKey $refFk
     */
    protected function addRefFkTypehintingClass(&$script, ForeignKey $refFk)
    {
        $table = $refFk->getTable();
        $queryBuilder = $this->getNewStubQueryBuilder($table);

        $fkTable = $this->getForeignTable($refFk);
        $fkQueryBuilder = $this->getNewStubQueryBuilder($fkTable);
        $refTypehintingQueryClassname = $this->getRefTypehintingClassname($table, $fkTable);

        // namespaces
        $this->declareClassFromBuilder($queryBuilder);
        $this->declareClassFromBuilder($fkQueryBuilder);

        if ($this->getBuildProperty('addClassLevelComment')) {
            $script .= "
/**
 * Hint class that providers typehinting for ". $queryBuilder->getClassname() ."::endUse().
 *";
            if ($this->getBuildProperty('addTimeStamp')) {
                $now = strftime('%c');
                $script .= "
 * This class was autogenerated by Propel " . $this->getBuildProperty('version') . " on:
 *
 * $now
 *";
            }

            $script .= "
 *
 * @package    propel.generator." . $this->getPackage() ."
 *";
        } else {
            $script .= "
/**";
        }

        $script .= "
 *
 * Empty class for IDE typehinting only.
 *
 * This class represents the relation between the tables ". $fkTable->getPhpName() ." and ". $table->getPhpName() .".
 *
 * @method ". $fkQueryBuilder->getClassname() ." endUse()
 */
abstract class $refTypehintingQueryClassname extends ". $queryBuilder->getClassname() ." {}
";
    }

    /**
     * @param Table $table
     * @param Table $fkTable
     * @return string
     */
    protected function getTypehintingClassname(Table $table, Table $fkTable)
    {
        return $table->getPhpName() .'Fk'. $fkTable->getPhpName() .'Hint';
    }

    /**
     * @param Table $table
     * @param Table $fkTable
     * @return string
     */
    protected function getRefTypehintingClassname(Table $table, Table $fkTable)
    {
        return $fkTable->getPhpName() .'Fk'. $table->getPhpName() .'Hint';
    }
}
